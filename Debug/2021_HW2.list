
2021_HW2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eb0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001058  08001058  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001058  08001058  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001058  08001058  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001058  08001058  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001058  08001058  00011058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800105c  0800105c  0001105c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001060  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000004  08001064  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08001064  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002cbc  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000aac  00000000  00000000  00022cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  000237a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  000239f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188dc  00000000  00000000  00023bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027ae  00000000  00000000  0003c4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088922  00000000  00000000  0003ec52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b8  00000000  00000000  000c75c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001040 	.word	0x08001040

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08001040 	.word	0x08001040

080001e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <SystemInit+0x20>)
 80001ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001f2:	4a05      	ldr	r2, [pc, #20]	; (8000208 <SystemInit+0x20>)
 80001f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <BufferTx_init>:

//static BUFFER dataTx_buf;	// Buffer to send data from

// Public function to initialize static buffers //
void BufferTx_init(BUFFER *B)
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	B->ptr = 0;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2200      	movs	r2, #0
 8000218:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	// Preset values to be transmitted //
	for (int i = 0; i < BUFFER_SIZE; i++)
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	e009      	b.n	8000236 <BufferTx_init+0x2a>
		B->data[i] = i;
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	b2d9      	uxtb	r1, r3
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	4413      	add	r3, r2
 800022c:	460a      	mov	r2, r1
 800022e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	3301      	adds	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	2bff      	cmp	r3, #255	; 0xff
 800023a:	ddf2      	ble.n	8000222 <BufferTx_init+0x16>
}
 800023c:	bf00      	nop
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr

0800024a <BufferRx_init>:

void BufferRx_init(BUFFER *B)
{
 800024a:	b480      	push	{r7}
 800024c:	b083      	sub	sp, #12
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
	B->ptr = 0;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <Buffer_Eof>:

// This function states if whole data transfer is completed //
uint8_t Buffer_Eof(BUFFER* B)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
	if (B->ptr > BUFFER_SIZE - 1)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000274:	2bff      	cmp	r3, #255	; 0xff
 8000276:	d901      	bls.n	800027c <Buffer_Eof+0x16>
		return 1;
 8000278:	2301      	movs	r3, #1
 800027a:	e000      	b.n	800027e <Buffer_Eof+0x18>
	return 0;
 800027c:	2300      	movs	r3, #0
}
 800027e:	4618      	mov	r0, r3
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr

0800028a <Buffer_reset>:

void Buffer_reset(BUFFER* B)
{
 800028a:	b480      	push	{r7}
 800028c:	b083      	sub	sp, #12
 800028e:	af00      	add	r7, sp, #0
 8000290:	6078      	str	r0, [r7, #4]
	B->ptr = 0;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
	...

080002a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db0b      	blt.n	80002d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 021f 	and.w	r2, r3, #31
 80002c0:	4907      	ldr	r1, [pc, #28]	; (80002e0 <__NVIC_EnableIRQ+0x38>)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	095b      	lsrs	r3, r3, #5
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	db12      	blt.n	800031c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f003 021f 	and.w	r2, r3, #31
 80002fc:	490a      	ldr	r1, [pc, #40]	; (8000328 <__NVIC_DisableIRQ+0x44>)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	095b      	lsrs	r3, r3, #5
 8000304:	2001      	movs	r0, #1
 8000306:	fa00 f202 	lsl.w	r2, r0, r2
 800030a:	3320      	adds	r3, #32
 800030c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000310:	f3bf 8f4f 	dsb	sy
}
 8000314:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000316:	f3bf 8f6f 	isb	sy
}
 800031a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000e100 	.word	0xe000e100

0800032c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	6039      	str	r1, [r7, #0]
 8000336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033c:	2b00      	cmp	r3, #0
 800033e:	db0a      	blt.n	8000356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	b2da      	uxtb	r2, r3
 8000344:	490c      	ldr	r1, [pc, #48]	; (8000378 <__NVIC_SetPriority+0x4c>)
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	0112      	lsls	r2, r2, #4
 800034c:	b2d2      	uxtb	r2, r2
 800034e:	440b      	add	r3, r1
 8000350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000354:	e00a      	b.n	800036c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4908      	ldr	r1, [pc, #32]	; (800037c <__NVIC_SetPriority+0x50>)
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	f003 030f 	and.w	r3, r3, #15
 8000362:	3b04      	subs	r3, #4
 8000364:	0112      	lsls	r2, r2, #4
 8000366:	b2d2      	uxtb	r2, r2
 8000368:	440b      	add	r3, r1
 800036a:	761a      	strb	r2, [r3, #24]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	e000e100 	.word	0xe000e100
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <EXTI0_IRQHandler>:
extern uint8_t ParReadyFlag;
extern uint8_t ParEnableFlag;

// EXTI on button press //
void EXTI0_IRQHandler()
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR0;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <EXTI0_IRQHandler+0x28>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <EXTI0_IRQHandler+0x28>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6153      	str	r3, [r2, #20]
	// Starts TIM6 in one pulse mode to protect from contact bounce //
	START_TIMER(TIM6);
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <EXTI0_IRQHandler+0x2c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a05      	ldr	r2, [pc, #20]	; (80003ac <EXTI0_IRQHandler+0x2c>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40013c00 	.word	0x40013c00
 80003ac:	40001000 	.word	0x40001000

080003b0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR8)	// EXTI on ENABLE line
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <EXTI9_5_IRQHandler+0x5c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d00c      	beq.n	80003da <EXTI9_5_IRQHandler+0x2a>
	{
		EXTI->PR |= EXTI_PR_PR8;
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <EXTI9_5_IRQHandler+0x5c>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a11      	ldr	r2, [pc, #68]	; (800040c <EXTI9_5_IRQHandler+0x5c>)
 80003c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ca:	6153      	str	r3, [r2, #20]
		GPIOE_SET_PIN(PAR_READY_PIN);
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <EXTI9_5_IRQHandler+0x60>)
 80003ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d2:	619a      	str	r2, [r3, #24]
		ParEnableFlag = PAR_ENABLE;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <EXTI9_5_IRQHandler+0x64>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
	}
	if (EXTI->PR & EXTI_PR_PR9) // EXTI on READY line
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <EXTI9_5_IRQHandler+0x5c>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d00c      	beq.n	8000400 <EXTI9_5_IRQHandler+0x50>
	{
		EXTI->PR |= EXTI_PR_PR9;
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <EXTI9_5_IRQHandler+0x5c>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a08      	ldr	r2, [pc, #32]	; (800040c <EXTI9_5_IRQHandler+0x5c>)
 80003ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f0:	6153      	str	r3, [r2, #20]
		ParReadyFlag = PAR_READY;
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <EXTI9_5_IRQHandler+0x68>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
		GPIOE_RESET_PIN(PAR_ENABLE_PIN);	// Byte set not complete
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <EXTI9_5_IRQHandler+0x60>)
 80003fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003fe:	619a      	str	r2, [r3, #24]
	}
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40013c00 	.word	0x40013c00
 8000410:	40021000 	.word	0x40021000
 8000414:	2000022b 	.word	0x2000022b
 8000418:	2000022a 	.word	0x2000022a

0800041c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler ()
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR10)	// EXTI on data read channel in serial transfer <-> Master starts transfer
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000428:	2b00      	cmp	r3, #0
 800042a:	d014      	beq.n	8000456 <EXTI15_10_IRQHandler+0x3a>
	{
		EXTI->PR |= EXTI_PR_PR10;
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 8000432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000436:	6153      	str	r3, [r2, #20]
		ParTranferFlag = PAR_START; // Start parallel transmission
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <EXTI15_10_IRQHandler+0x88>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]

		if(TIM3_FrequencySet(GPIOE_GetFrequency()) == TIM_FERQ_ERROR)	// Try to get reception rate
 800043e:	f000 f99d 	bl	800077c <GPIOE_GetFrequency>
 8000442:	4603      	mov	r3, r0
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fd51 	bl	8000eec <TIM3_FrequencySet>
 800044a:	4603      	mov	r3, r0
 800044c:	2b01      	cmp	r3, #1
 800044e:	d024      	beq.n	800049a <EXTI15_10_IRQHandler+0x7e>
			return;
		SerialStartReceiveFlag = RECEIVE_START;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <EXTI15_10_IRQHandler+0x8c>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
	}
	if (EXTI->PR & EXTI_PR_PR11)	// EXTI on byte synchronization
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800045e:	2b00      	cmp	r3, #0
 8000460:	d014      	beq.n	800048c <EXTI15_10_IRQHandler+0x70>
	{
		EXTI->PR |= EXTI_PR_PR11;
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 8000468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800046c:	6153      	str	r3, [r2, #20]
		EXTI->IMR &= ~EXTI_IMR_MR11;
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 8000474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000478:	6013      	str	r3, [r2, #0]
		EXTI->EMR &= ~EXTI_EMR_MR11;
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <EXTI15_10_IRQHandler+0x84>)
 8000480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000484:	6053      	str	r3, [r2, #4]
		NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000486:	2028      	movs	r0, #40	; 0x28
 8000488:	f7ff ff2c 	bl	80002e4 <__NVIC_DisableIRQ>
	}
	TIMER_CNT_RESET(TIM3);
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <EXTI15_10_IRQHandler+0x90>)
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(TIM3_IRQn);
 8000492:	201d      	movs	r0, #29
 8000494:	f7ff ff08 	bl	80002a8 <__NVIC_EnableIRQ>
 8000498:	e000      	b.n	800049c <EXTI15_10_IRQHandler+0x80>
			return;
 800049a:	bf00      	nop
}
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40013c00 	.word	0x40013c00
 80004a4:	2000022c 	.word	0x2000022c
 80004a8:	2000022e 	.word	0x2000022e
 80004ac:	40000400 	.word	0x40000400

080004b0 <GPIOA_Button_init>:

// Mode & transfer start switch initialization //
void GPIOA_Button_init()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	// Button is located on PA0 pin //
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <GPIOA_Button_init+0x60>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4a15      	ldr	r2, [pc, #84]	; (8000510 <GPIOA_Button_init+0x60>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~GPIO_MODER_MODER0;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <GPIOA_Button_init+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a13      	ldr	r2, [pc, #76]	; (8000514 <GPIOA_Button_init+0x64>)
 80004c6:	f023 0303 	bic.w	r3, r3, #3
 80004ca:	6013      	str	r3, [r2, #0]

	EXTI->IMR|= EXTI_IMR_IM0;
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <GPIOA_Button_init+0x68>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a11      	ldr	r2, [pc, #68]	; (8000518 <GPIOA_Button_init+0x68>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]
	EXTI->EMR|= EXTI_EMR_EM0;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <GPIOA_Button_init+0x68>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <GPIOA_Button_init+0x68>)
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	6053      	str	r3, [r2, #4]

	EXTI->RTSR|= EXTI_RTSR_TR0;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <GPIOA_Button_init+0x68>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <GPIOA_Button_init+0x68>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6093      	str	r3, [r2, #8]

	SYSCFG->EXTICR[0] &= ~0xF;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <GPIOA_Button_init+0x6c>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <GPIOA_Button_init+0x6c>)
 80004f6:	f023 030f 	bic.w	r3, r3, #15
 80004fa:	6093      	str	r3, [r2, #8]

	NVIC_SetPriority(EXTI0_IRQn, 3);
 80004fc:	2103      	movs	r1, #3
 80004fe:	2006      	movs	r0, #6
 8000500:	f7ff ff14 	bl	800032c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000504:	2006      	movs	r0, #6
 8000506:	f7ff fecf 	bl	80002a8 <__NVIC_EnableIRQ>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800
 8000514:	40020000 	.word	0x40020000
 8000518:	40013c00 	.word	0x40013c00
 800051c:	40013800 	.word	0x40013800

08000520 <GPIOD_init>:

void GPIOD_init()
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <GPIOD_init+0x34>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <GPIOD_init+0x34>)
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	6313      	str	r3, [r2, #48]	; 0x30
	// Output mode and pull-down on pins 12, 13, 14, 15 //
	GPIOD->MODER |= 0x55 << 24;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <GPIOD_init+0x38>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <GPIOD_init+0x38>)
 8000536:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800053a:	6013      	str	r3, [r2, #0]
	GPIOD->PUPDR |= 0xAA << 24;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <GPIOD_init+0x38>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <GPIOD_init+0x38>)
 8000542:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
 8000546:	60d3      	str	r3, [r2, #12]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023800 	.word	0x40023800
 8000558:	40020c00 	.word	0x40020c00

0800055c <GPIOE_ParallelOut_init>:

void GPIOE_ParallelOut_init()
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <GPIOE_ParallelOut_init+0x84>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000564:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <GPIOE_ParallelOut_init+0x84>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOE->MODER &= ~(0xFFFFF);
 800056c:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <GPIOE_ParallelOut_init+0x88>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <GPIOE_ParallelOut_init+0x88>)
 8000572:	0d1b      	lsrs	r3, r3, #20
 8000574:	051b      	lsls	r3, r3, #20
 8000576:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= 0x15555;
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <GPIOE_ParallelOut_init+0x88>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4919      	ldr	r1, [pc, #100]	; (80005e4 <GPIOE_ParallelOut_init+0x88>)
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <GPIOE_ParallelOut_init+0x8c>)
 8000580:	4313      	orrs	r3, r2
 8000582:	600b      	str	r3, [r1, #0]

	EXTI->IMR &= ~EXTI_IMR_IM8;
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a18      	ldr	r2, [pc, #96]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 800058a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800058e:	6013      	str	r3, [r2, #0]
	EXTI->EMR &= ~EXTI_EMR_EM8;
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	4a15      	ldr	r2, [pc, #84]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 8000596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800059a:	6053      	str	r3, [r2, #4]

	EXTI->IMR |= EXTI_IMR_IM9;
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a12      	ldr	r2, [pc, #72]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 80005a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a6:	6013      	str	r3, [r2, #0]
	EXTI->EMR |= EXTI_EMR_EM9;
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 80005ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005b2:	6053      	str	r3, [r2, #4]

	EXTI->FTSR |= EXTI_FTSR_TR9;
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <GPIOE_ParallelOut_init+0x90>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	60d3      	str	r3, [r2, #12]

	SYSCFG->EXTICR[2] |= 0x4 << 4;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <GPIOE_ParallelOut_init+0x94>)
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <GPIOE_ParallelOut_init+0x94>)
 80005c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ca:	6113      	str	r3, [r2, #16]

	NVIC_SetPriority(EXTI9_5_IRQn, 3);
 80005cc:	2103      	movs	r1, #3
 80005ce:	2017      	movs	r0, #23
 80005d0:	f7ff feac 	bl	800032c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005d4:	2017      	movs	r0, #23
 80005d6:	f7ff fe67 	bl	80002a8 <__NVIC_EnableIRQ>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40021000 	.word	0x40021000
 80005e8:	00015555 	.word	0x00015555
 80005ec:	40013c00 	.word	0x40013c00
 80005f0:	40013800 	.word	0x40013800

080005f4 <GPIOE_ParallelIn_init>:


void GPIOE_ParallelIn_init()
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	GPIOE->MODER &= ~(0xFFFFF);
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <GPIOE_ParallelIn_init+0x70>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a19      	ldr	r2, [pc, #100]	; (8000664 <GPIOE_ParallelIn_init+0x70>)
 80005fe:	0d1b      	lsrs	r3, r3, #20
 8000600:	051b      	lsls	r3, r3, #20
 8000602:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= 0x1 << (PAR_READY_PIN*2);
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <GPIOE_ParallelIn_init+0x70>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a16      	ldr	r2, [pc, #88]	; (8000664 <GPIOE_ParallelIn_init+0x70>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6013      	str	r3, [r2, #0]

	EXTI->IMR &= ~EXTI_IMR_IM9;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 8000616:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800061a:	6013      	str	r3, [r2, #0]
	EXTI->EMR &= ~EXTI_EMR_EM9;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4a11      	ldr	r2, [pc, #68]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 8000622:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000626:	6053      	str	r3, [r2, #4]

	EXTI->IMR |= EXTI_IMR_IM8;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 800062e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000632:	6013      	str	r3, [r2, #0]
	EXTI->EMR |= EXTI_EMR_EM8;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 800063a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063e:	6053      	str	r3, [r2, #4]

	EXTI->RTSR|= EXTI_RTSR_TR8;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <GPIOE_ParallelIn_init+0x74>)
 8000646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800064a:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[2] |= 0x4;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <GPIOE_ParallelIn_init+0x78>)
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <GPIOE_ParallelIn_init+0x78>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6113      	str	r3, [r2, #16]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000
 8000668:	40013c00 	.word	0x40013c00
 800066c:	40013800 	.word	0x40013800

08000670 <GPIOE_SerialOut_init>:

void GPIOE_SerialOut_init()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	GPIOE_SET_PIN(DATA_SEND);
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <GPIOE_SerialOut_init+0x54>)
 8000676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800067a:	619a      	str	r2, [r3, #24]
	GPIOE_SET_PIN(DATA_CH);
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <GPIOE_SerialOut_init+0x54>)
 800067e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000682:	619a      	str	r2, [r3, #24]
	GPIOE->MODER |= 0x155 << 20;	// f0...f2 & CH & SEND output mode select
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <GPIOE_SerialOut_init+0x54>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <GPIOE_SerialOut_init+0x54>)
 800068a:	f043 53aa 	orr.w	r3, r3, #356515840	; 0x15400000
 800068e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000692:	6013      	str	r3, [r2, #0]
	GPIOE->PUPDR &= ~(0xF << 20);
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <GPIOE_SerialOut_init+0x54>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <GPIOE_SerialOut_init+0x54>)
 800069a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800069e:	60d3      	str	r3, [r2, #12]

	EXTI->IMR &= ~EXTI_IMR_MR10;	// Interrupt Mask on line 10
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <GPIOE_SerialOut_init+0x58>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <GPIOE_SerialOut_init+0x58>)
 80006a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006aa:	6013      	str	r3, [r2, #0]
	EXTI->EMR &= ~EXTI_EMR_MR10;	// Event Mask on line 10
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <GPIOE_SerialOut_init+0x58>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <GPIOE_SerialOut_init+0x58>)
 80006b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006b6:	6053      	str	r3, [r2, #4]
	NVIC_DisableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f7ff fe13 	bl	80002e4 <__NVIC_DisableIRQ>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40013c00 	.word	0x40013c00

080006cc <GPIOE_SerialIn_init>:

void GPIOE_SerialIn_init()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <GPIOE_SerialIn_init+0xa0>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	4a25      	ldr	r2, [pc, #148]	; (800076c <GPIOE_SerialIn_init+0xa0>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOE->PUPDR |= 0x5 << 20;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <GPIOE_SerialIn_init+0xa4>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a23      	ldr	r2, [pc, #140]	; (8000770 <GPIOE_SerialIn_init+0xa4>)
 80006e2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80006e6:	60d3      	str	r3, [r2, #12]
	GPIOE->MODER &= ~(0x3FF << 20);	// Input mode on all serial bus pins
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <GPIOE_SerialIn_init+0xa4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a20      	ldr	r2, [pc, #128]	; (8000770 <GPIOE_SerialIn_init+0xa4>)
 80006ee:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 80006f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80006f6:	6013      	str	r3, [r2, #0]

	SYSCFG->EXTICR[2] |= 1 << 10;	// PE10 interrupt line to EXTI connect
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <GPIOE_SerialIn_init+0xa8>)
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <GPIOE_SerialIn_init+0xa8>)
 80006fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000702:	6113      	str	r3, [r2, #16]
	EXTI->IMR |= EXTI_IMR_MR10;		// Interrupt Mask on line 10
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 800070a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800070e:	6013      	str	r3, [r2, #0]
	EXTI->EMR |= EXTI_EMR_MR10;		// Event Mask on line 10
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 8000716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800071a:	6053      	str	r3, [r2, #4]
	EXTI->FTSR |= EXTI_FTSR_TR10; 	// Falling trigger event configuration bit of line 10
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	4a15      	ldr	r2, [pc, #84]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 8000722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000726:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(EXTI15_10_IRQn, 5);
 8000728:	2105      	movs	r1, #5
 800072a:	2028      	movs	r0, #40	; 0x28
 800072c:	f7ff fdfe 	bl	800032c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000730:	2028      	movs	r0, #40	; 0x28
 8000732:	f7ff fdb9 	bl	80002a8 <__NVIC_EnableIRQ>

	SYSCFG->EXTICR[2] |= 1 << 14;	// PE11 interrupt line to EXTI connect
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <GPIOE_SerialIn_init+0xa8>)
 8000738:	691b      	ldr	r3, [r3, #16]
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <GPIOE_SerialIn_init+0xa8>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6113      	str	r3, [r2, #16]
	EXTI->IMR &= ~EXTI_IMR_MR11;	// Interrupt Mask on line 11
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 8000748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800074c:	6013      	str	r3, [r2, #0]
	EXTI->EMR &= ~EXTI_EMR_MR11;	// Event Mask on line 11
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 8000754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000758:	6053      	str	r3, [r2, #4]
	EXTI->FTSR |= EXTI_FTSR_TR11; 	// Falling trigger event configuration bit of line 11
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	4a06      	ldr	r2, [pc, #24]	; (8000778 <GPIOE_SerialIn_init+0xac>)
 8000760:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000764:	60d3      	str	r3, [r2, #12]
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40021000 	.word	0x40021000
 8000774:	40013800 	.word	0x40013800
 8000778:	40013c00 	.word	0x40013c00

0800077c <GPIOE_GetFrequency>:

uint8_t GPIOE_GetFrequency()
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	return ((GPIOE->IDR & FREQ_MASK) >> FREQ_POS) & 0x7;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <GPIOE_GetFrequency+0x1c>)
 8000782:	691b      	ldr	r3, [r3, #16]
 8000784:	0b1b      	lsrs	r3, r3, #12
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	b2db      	uxtb	r3, r3
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000

0800079c <GPIOE_FrequencySet>:

uint8_t GPIOE_FrequencySet()
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
			GPIOE->BSRR = FREQ_10K << FREQ_POS;
			TIM3->ARR = 80-1;
			TIM3->PSC = 10-1;
		break;
		case FREQ_20K:
			GPIOE->BSRR = FREQ_20K << FREQ_POS;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <GPIOE_FrequencySet+0x28>)
 80007a2:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80007a6:	619a      	str	r2, [r3, #24]
			TIM3->ARR = 40-1;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <GPIOE_FrequencySet+0x2c>)
 80007aa:	2227      	movs	r2, #39	; 0x27
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC = 10-1;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <GPIOE_FrequencySet+0x2c>)
 80007b0:	2209      	movs	r2, #9
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80007b4:	bf00      	nop
		default:
			// In case of undefined frequency of serial transfer //
			GPIOE->BSRR = FREQ_0 << FREQ_POS; // Reset f0..f2 ports to 0
		return GPIOE_FERQ_ERROR;
	}
	return GPIOE_FERQ_SET;	// OK
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40000400 	.word	0x40000400

080007cc <MasterMode_init>:

void MasterMode_init()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	if (GPIOE_FrequencySet() == GPIOE_FERQ_ERROR)	// Try to set transmission rate
 80007d0:	f7ff ffe4 	bl	800079c <GPIOE_FrequencySet>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d011      	beq.n	80007fe <MasterMode_init+0x32>
		return;
	SerialOut_init();
 80007da:	f000 f953 	bl	8000a84 <SerialOut_init>
	ParallelIn_init();
 80007de:	f000 f859 	bl	8000894 <ParallelIn_init>
	GPIOE_RESET_PIN(DATA_SEND);
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MasterMode_init+0x38>)
 80007e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007e8:	619a      	str	r2, [r3, #24]
	DeviceMode = MASTER_MODE;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MasterMode_init+0x3c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
	TIMER_CNT_RESET(TIM3);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MasterMode_init+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(TIM3_IRQn);
 80007f6:	201d      	movs	r0, #29
 80007f8:	f7ff fd56 	bl	80002a8 <__NVIC_EnableIRQ>
 80007fc:	e000      	b.n	8000800 <MasterMode_init+0x34>
		return;
 80007fe:	bf00      	nop
}
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	20000020 	.word	0x20000020
 800080c:	40000400 	.word	0x40000400

08000810 <SlaveMode_init>:

void SlaveMode_init()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <SlaveMode_init+0x28>)
 8000816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <SlaveMode_init+0x28>)
 800081a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081e:	6453      	str	r3, [r2, #68]	; 0x44
	DeviceMode = SLAVE_MODE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <SlaveMode_init+0x2c>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
	SerialIn_init();
 8000826:	f000 f93d 	bl	8000aa4 <SerialIn_init>
	ParallelOut_init();
 800082a:	f000 f843 	bl	80008b4 <ParallelOut_init>
	TIM3_init();
 800082e:	f000 fb03 	bl	8000e38 <TIM3_init>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	20000020 	.word	0x20000020

08000840 <GPIOE_setByte>:

void GPIOE_setByte(uint8_t data_byte)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	GPIOE->BSRR = 0xFF << 16;	//Reset bus pins
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <GPIOE_setByte+0x24>)
 800084c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000850:	619a      	str	r2, [r3, #24]
	GPIOE->BSRR = data_byte; // Set new data to pins
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <GPIOE_setByte+0x24>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	6193      	str	r3, [r2, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	40021000 	.word	0x40021000

08000868 <Button_init>:
BUFFER dataTx_buf;
BUFFER dataRx_buf;
uint8_t DeviceMode;

void Button_init()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	TIM6_init();
 800086c:	f000 fb0e 	bl	8000e8c <TIM6_init>
	GPIOA_Button_init();
 8000870:	f7ff fe1e 	bl	80004b0 <GPIOA_Button_init>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <main>:

int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	GPIOD_init();
 800087c:	f7ff fe50 	bl	8000520 <GPIOD_init>
	SlaveMode_init();
 8000880:	f7ff ffc6 	bl	8000810 <SlaveMode_init>
	Button_init();
 8000884:	f7ff fff0 	bl	8000868 <Button_init>
	while(1)
	{
		Serial_trancieveData();
 8000888:	f000 f9d6 	bl	8000c38 <Serial_trancieveData>
		ParallelTranceive();
 800088c:	f000 f844 	bl	8000918 <ParallelTranceive>
		Serial_trancieveData();
 8000890:	e7fa      	b.n	8000888 <main+0x10>
	...

08000894 <ParallelIn_init>:
uint8_t ParTranferFlag;
uint8_t ParReadyFlag;
uint8_t ParEnableFlag;

void ParallelIn_init()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	GPIOE_ParallelIn_init();
 8000898:	f7ff feac 	bl	80005f4 <GPIOE_ParallelIn_init>
	ParEnableFlag = PAR_NOT_ENABLE;
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <ParallelIn_init+0x18>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
	BufferRx_init(&dataRx_buf);
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <ParallelIn_init+0x1c>)
 80008a4:	f7ff fcd1 	bl	800024a <BufferRx_init>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000022b 	.word	0x2000022b
 80008b0:	20000128 	.word	0x20000128

080008b4 <ParallelOut_init>:

void ParallelOut_init()
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	GPIOE_ParallelOut_init();
 80008b8:	f7ff fe50 	bl	800055c <GPIOE_ParallelOut_init>
	ParTranferFlag = PAR_STOP;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <ParallelOut_init+0x20>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	ParReadyFlag = PAR_READY;	// Pretend that last byte is received
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <ParallelOut_init+0x24>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
	BufferTx_init(&dataTx_buf);
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <ParallelOut_init+0x28>)
 80008ca:	f7ff fc9f 	bl	800020c <BufferTx_init>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000022c 	.word	0x2000022c
 80008d8:	2000022a 	.word	0x2000022a
 80008dc:	20000024 	.word	0x20000024

080008e0 <Parallel_appendData>:

void Parallel_appendData()
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	dataRx_buf.data[dataRx_buf.ptr] = GPIOE->IDR & 0xFF;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <Parallel_appendData+0x30>)
 80008e6:	6919      	ldr	r1, [r3, #16]
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <Parallel_appendData+0x34>)
 80008ea:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80008ee:	461a      	mov	r2, r3
 80008f0:	b2c9      	uxtb	r1, r1
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <Parallel_appendData+0x34>)
 80008f4:	5499      	strb	r1, [r3, r2]
	++dataRx_buf.ptr;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <Parallel_appendData+0x34>)
 80008f8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80008fc:	3301      	adds	r3, #1
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <Parallel_appendData+0x34>)
 8000902:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000
 8000914:	20000128 	.word	0x20000128

08000918 <ParallelTranceive>:

void ParallelTranceive()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	if (DeviceMode == MASTER_MODE)
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <ParallelTranceive+0x90>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d116      	bne.n	8000952 <ParallelTranceive+0x3a>
	{
		if (Buffer_Eof(&dataRx_buf))
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <ParallelTranceive+0x94>)
 8000926:	f7ff fc9e 	bl	8000266 <Buffer_Eof>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <ParallelTranceive+0x1e>
		{
			Parallel_stopReception();
 8000930:	f000 f85a 	bl	80009e8 <Parallel_stopReception>
			return;
 8000934:	e036      	b.n	80009a4 <ParallelTranceive+0x8c>
		}
		if (ParEnableFlag == PAR_ENABLE)
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <ParallelTranceive+0x98>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d132      	bne.n	80009a4 <ParallelTranceive+0x8c>
		{
			ParEnableFlag = PAR_NOT_ENABLE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <ParallelTranceive+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
			Parallel_appendData();
 8000944:	f7ff ffcc 	bl	80008e0 <Parallel_appendData>
			GPIOE_RESET_PIN(PAR_READY_PIN);
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <ParallelTranceive+0x9c>)
 800094a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800094e:	619a      	str	r2, [r3, #24]
 8000950:	e028      	b.n	80009a4 <ParallelTranceive+0x8c>
		}
	}
	else // DeviceMode == SLAVE_MODE
	{
		if (ParTranferFlag == PAR_START)
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <ParallelTranceive+0xa0>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d124      	bne.n	80009a4 <ParallelTranceive+0x8c>
		{
			if (ParReadyFlag == PAR_READY)	// Receiver is ready to receive next byte
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <ParallelTranceive+0xa4>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d120      	bne.n	80009a4 <ParallelTranceive+0x8c>
			{
				if (Buffer_Eof(&dataTx_buf))
 8000962:	4817      	ldr	r0, [pc, #92]	; (80009c0 <ParallelTranceive+0xa8>)
 8000964:	f7ff fc7f 	bl	8000266 <Buffer_Eof>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <ParallelTranceive+0x5c>
				{
					Parallel_stopTranfer();
 800096e:	f000 f829 	bl	80009c4 <Parallel_stopTranfer>
					return;
 8000972:	e017      	b.n	80009a4 <ParallelTranceive+0x8c>
				}
				ParReadyFlag = PAR_NOT_READY;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <ParallelTranceive+0xa4>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
				GPIOE_setByte(dataTx_buf.data[dataTx_buf.ptr]);
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <ParallelTranceive+0xa8>)
 800097c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000980:	461a      	mov	r2, r3
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <ParallelTranceive+0xa8>)
 8000984:	5c9b      	ldrb	r3, [r3, r2]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff5a 	bl	8000840 <GPIOE_setByte>
				++dataTx_buf.ptr;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <ParallelTranceive+0xa8>)
 800098e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000992:	3301      	adds	r3, #1
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <ParallelTranceive+0xa8>)
 8000998:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
				GPIOE_SET_PIN(PAR_ENABLE_PIN);	// Byte set complete
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <ParallelTranceive+0x9c>)
 800099e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a2:	619a      	str	r2, [r3, #24]
			}
		}
	}
}
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000020 	.word	0x20000020
 80009ac:	20000128 	.word	0x20000128
 80009b0:	2000022b 	.word	0x2000022b
 80009b4:	40021000 	.word	0x40021000
 80009b8:	2000022c 	.word	0x2000022c
 80009bc:	2000022a 	.word	0x2000022a
 80009c0:	20000024 	.word	0x20000024

080009c4 <Parallel_stopTranfer>:

void Parallel_stopTranfer()
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	ParTranferFlag = PAR_STOP;
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <Parallel_stopTranfer+0x1c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
	GPIOE_setByte(0x00); // reset bus pins
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff ff36 	bl	8000840 <GPIOE_setByte>
	Buffer_reset(&dataTx_buf);
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <Parallel_stopTranfer+0x20>)
 80009d6:	f7ff fc58 	bl	800028a <Buffer_reset>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000022c 	.word	0x2000022c
 80009e4:	20000024 	.word	0x20000024

080009e8 <Parallel_stopReception>:

void Parallel_stopReception()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
//	DeviceMode = SLAVE_MODE; // IF PARALLERL IS FASTER THAN SERIAL
	GPIOE_ParallelOut_init();
 80009ec:	f7ff fdb6 	bl	800055c <GPIOE_ParallelOut_init>
	Buffer_reset(&dataRx_buf);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <Parallel_stopReception+0x14>)
 80009f2:	f7ff fc4a 	bl	800028a <Buffer_reset>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000128 	.word	0x20000128

08000a00 <__NVIC_EnableIRQ>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <__NVIC_EnableIRQ+0x38>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_DisableIRQ>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db12      	blt.n	8000a74 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	490a      	ldr	r1, [pc, #40]	; (8000a80 <__NVIC_DisableIRQ+0x44>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	3320      	adds	r3, #32
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a68:	f3bf 8f4f 	dsb	sy
}
 8000a6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a6e:	f3bf 8f6f 	isb	sy
}
 8000a72:	bf00      	nop
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <SerialOut_init>:
extern BUFFER dataRx_buf;
extern uint8_t DeviceMode;
extern uint8_t TIM_indx;

void SerialOut_init()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	SerialSetBitFlag = BIT_SET_DONE;
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SerialOut_init+0x18>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
	GPIOE_SerialOut_init();
 8000a8e:	f7ff fdef 	bl	8000670 <GPIOE_SerialOut_init>
	BufferTx_init(&dataTx_buf); // Data to send
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <SerialOut_init+0x1c>)
 8000a94:	f7ff fbba 	bl	800020c <BufferTx_init>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000022d 	.word	0x2000022d
 8000aa0:	20000024 	.word	0x20000024

08000aa4 <SerialIn_init>:

void SerialIn_init()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	TIM_indx = 0;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <SerialIn_init+0x24>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	SerialReceiveBitFlag = BIT_RECEIVE_DONE;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <SerialIn_init+0x28>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
	SerialStartReceiveFlag = RECEIVE_STOP;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SerialIn_init+0x2c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	GPIOE_SerialIn_init();
 8000aba:	f7ff fe07 	bl	80006cc <GPIOE_SerialIn_init>
	BufferRx_init(&dataRx_buf);
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <SerialIn_init+0x30>)
 8000ac0:	f7ff fbc3 	bl	800024a <BufferRx_init>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000230 	.word	0x20000230
 8000acc:	2000022f 	.word	0x2000022f
 8000ad0:	2000022e 	.word	0x2000022e
 8000ad4:	20000128 	.word	0x20000128

08000ad8 <SerialSetData>:

// This function sends bits of data from LSB to MSB //
void SerialSetData()
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	static uint8_t bit_mask = 255; // Chooses current bit of data
	// Reset bit operation pending flag //
		SerialSetBitFlag = BIT_SET_DONE;
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <SerialSetData+0x94>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
	if (bit_mask == 255)	// Start bit
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <SerialSetData+0x98>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2bff      	cmp	r3, #255	; 0xff
 8000ae8:	d10a      	bne.n	8000b00 <SerialSetData+0x28>
	{
		GPIOE_RESET_PIN(DATA_CH);
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <SerialSetData+0x9c>)
 8000aec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af0:	619a      	str	r2, [r3, #24]
		++bit_mask;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <SerialSetData+0x98>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <SerialSetData+0x98>)
 8000afc:	701a      	strb	r2, [r3, #0]
		return;
 8000afe:	e031      	b.n	8000b64 <SerialSetData+0x8c>
	}
	if(bit_mask > 7)
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <SerialSetData+0x98>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b07      	cmp	r3, #7
 8000b06:	d90f      	bls.n	8000b28 <SerialSetData+0x50>
	{
		// Byte transmission is complete //
		GPIOE_SET_PIN(DATA_CH);	// Stop bit
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <SerialSetData+0x9c>)
 8000b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b0e:	619a      	str	r2, [r3, #24]
		bit_mask = 255;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <SerialSetData+0x98>)
 8000b12:	22ff      	movs	r2, #255	; 0xff
 8000b14:	701a      	strb	r2, [r3, #0]
		++dataTx_buf.ptr;
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SerialSetData+0xa0>)
 8000b18:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SerialSetData+0xa0>)
 8000b22:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
		return;
 8000b26:	e01d      	b.n	8000b64 <SerialSetData+0x8c>
	}
	// Set of current bit of data to SER_DATA_CH pin //
	if (dataTx_buf.data[dataTx_buf.ptr] & (0x1 << bit_mask))
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <SerialSetData+0xa0>)
 8000b2a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <SerialSetData+0xa0>)
 8000b32:	5c9b      	ldrb	r3, [r3, r2]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <SerialSetData+0x98>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	fa42 f303 	asr.w	r3, r2, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d004      	beq.n	8000b50 <SerialSetData+0x78>
		GPIOE_SET_PIN(DATA_CH);
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <SerialSetData+0x9c>)
 8000b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b4c:	619a      	str	r2, [r3, #24]
 8000b4e:	e003      	b.n	8000b58 <SerialSetData+0x80>
	else
		GPIOE_RESET_PIN(DATA_CH);
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <SerialSetData+0x9c>)
 8000b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b56:	619a      	str	r2, [r3, #24]
	++bit_mask; // Bit mask shift towards the MSB bit
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SerialSetData+0x98>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <SerialSetData+0x98>)
 8000b62:	701a      	strb	r2, [r3, #0]
}
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	2000022d 	.word	0x2000022d
 8000b70:	20000000 	.word	0x20000000
 8000b74:	40021000 	.word	0x40021000
 8000b78:	20000024 	.word	0x20000024

08000b7c <SerialGetData>:

void SerialGetData()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	static uint8_t bit_mask = 255; // Chooses current bit of data

	SerialReceiveBitFlag = BIT_RECEIVE_DONE;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <SerialGetData+0xa4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
	if (bit_mask == 255)	// Start bit
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <SerialGetData+0xa8>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2bff      	cmp	r3, #255	; 0xff
 8000b8c:	d106      	bne.n	8000b9c <SerialGetData+0x20>
	{
		++bit_mask;
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <SerialGetData+0xa8>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <SerialGetData+0xa8>)
 8000b98:	701a      	strb	r2, [r3, #0]
		return;
 8000b9a:	e040      	b.n	8000c1e <SerialGetData+0xa2>
	}
	// Set of current bit of data to SER_DATA_CH pin //
	dataRx_buf.data[dataRx_buf.ptr] |= (((GPIOE->IDR & DATA_CH_MSK) >> DATA_CH) & 0x1) << bit_mask;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <SerialGetData+0xac>)
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	0adb      	lsrs	r3, r3, #11
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <SerialGetData+0xa8>)
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	fa03 f102 	lsl.w	r1, r3, r2
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <SerialGetData+0xb0>)
 8000bb0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <SerialGetData+0xb0>)
 8000bb8:	5c9a      	ldrb	r2, [r3, r2]
 8000bba:	b2cb      	uxtb	r3, r1
 8000bbc:	491b      	ldr	r1, [pc, #108]	; (8000c2c <SerialGetData+0xb0>)
 8000bbe:	f8b1 1100 	ldrh.w	r1, [r1, #256]	; 0x100
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <SerialGetData+0xb0>)
 8000bc8:	545a      	strb	r2, [r3, r1]
	// Reset bit operation pending flag //
	++bit_mask; // Bit mask shift towards the MSB bit
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <SerialGetData+0xa8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <SerialGetData+0xa8>)
 8000bd4:	701a      	strb	r2, [r3, #0]
	if(bit_mask > 7)
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <SerialGetData+0xa8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b07      	cmp	r3, #7
 8000bdc:	d91f      	bls.n	8000c1e <SerialGetData+0xa2>
	{
		// Byte reception is complete //
		bit_mask = 255;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <SerialGetData+0xa8>)
 8000be0:	22ff      	movs	r2, #255	; 0xff
 8000be2:	701a      	strb	r2, [r3, #0]
		++dataRx_buf.ptr;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <SerialGetData+0xb0>)
 8000be6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000bea:	3301      	adds	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <SerialGetData+0xb0>)
 8000bf0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
		NVIC_DisableIRQ(TIM3_IRQn);
 8000bf4:	201d      	movs	r0, #29
 8000bf6:	f7ff ff21 	bl	8000a3c <__NVIC_DisableIRQ>
		TIM_indx = 0;
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <SerialGetData+0xb4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c00:	2028      	movs	r0, #40	; 0x28
 8000c02:	f7ff fefd 	bl	8000a00 <__NVIC_EnableIRQ>
		EXTI->IMR |= EXTI_IMR_MR11;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <SerialGetData+0xb8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SerialGetData+0xb8>)
 8000c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c10:	6013      	str	r3, [r2, #0]
		EXTI->EMR |= EXTI_EMR_MR11;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <SerialGetData+0xb8>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <SerialGetData+0xb8>)
 8000c18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c1c:	6053      	str	r3, [r2, #4]
	}
}
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000022f 	.word	0x2000022f
 8000c24:	20000001 	.word	0x20000001
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	20000128 	.word	0x20000128
 8000c30:	20000230 	.word	0x20000230
 8000c34:	40013c00 	.word	0x40013c00

08000c38 <Serial_trancieveData>:

void Serial_trancieveData()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	if (DeviceMode == MASTER_MODE)
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <Serial_trancieveData+0x60>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10f      	bne.n	8000c64 <Serial_trancieveData+0x2c>
	{
		if (Buffer_Eof(&dataTx_buf))
 8000c44:	4815      	ldr	r0, [pc, #84]	; (8000c9c <Serial_trancieveData+0x64>)
 8000c46:	f7ff fb0e 	bl	8000266 <Buffer_Eof>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <Serial_trancieveData+0x1e>
		{
			SerialOut_stopSend();
 8000c50:	f000 f830 	bl	8000cb4 <SerialOut_stopSend>
			return;
 8000c54:	e01f      	b.n	8000c96 <Serial_trancieveData+0x5e>
		}
		if(SerialSetBitFlag == PENDING_BIT_SET)	// Main serial clock interrupt in occurred
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <Serial_trancieveData+0x68>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d11b      	bne.n	8000c96 <Serial_trancieveData+0x5e>
			SerialSetData();
 8000c5e:	f7ff ff3b 	bl	8000ad8 <SerialSetData>
 8000c62:	e018      	b.n	8000c96 <Serial_trancieveData+0x5e>
	}
	else // DeviceMode == SLAVE_MODE
	{
		if (SerialStartReceiveFlag == RECEIVE_START)
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <Serial_trancieveData+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d114      	bne.n	8000c96 <Serial_trancieveData+0x5e>
		{
			if ((GPIOE->IDR & (0x1 << DATA_SEND)) || Buffer_Eof(&dataRx_buf))
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <Serial_trancieveData+0x70>)
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <Serial_trancieveData+0x4c>
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <Serial_trancieveData+0x74>)
 8000c7a:	f7ff faf4 	bl	8000266 <Buffer_Eof>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <Serial_trancieveData+0x52>
			{
				SerialIn_stopReceive();
 8000c84:	f000 f824 	bl	8000cd0 <SerialIn_stopReceive>
				return;
 8000c88:	e005      	b.n	8000c96 <Serial_trancieveData+0x5e>
			}
			if(SerialReceiveBitFlag == PENDING_BIT_RECEIVE)
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <Serial_trancieveData+0x78>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d101      	bne.n	8000c96 <Serial_trancieveData+0x5e>
				SerialGetData();
 8000c92:	f7ff ff73 	bl	8000b7c <SerialGetData>
		}
	}
}
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000020 	.word	0x20000020
 8000c9c:	20000024 	.word	0x20000024
 8000ca0:	2000022d 	.word	0x2000022d
 8000ca4:	2000022e 	.word	0x2000022e
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	20000128 	.word	0x20000128
 8000cb0:	2000022f 	.word	0x2000022f

08000cb4 <SerialOut_stopSend>:

void SerialOut_stopSend()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(TIM3_IRQn);
 8000cb8:	201d      	movs	r0, #29
 8000cba:	f7ff febf 	bl	8000a3c <__NVIC_DisableIRQ>
	SerialIn_init();
 8000cbe:	f7ff fef1 	bl	8000aa4 <SerialIn_init>
	DeviceMode = SLAVE_MODE;
 8000cc2:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <SerialOut_stopSend+0x18>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000020 	.word	0x20000020

08000cd0 <SerialIn_stopReceive>:

void SerialIn_stopReceive()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(TIM3_IRQn);
 8000cd4:	201d      	movs	r0, #29
 8000cd6:	f7ff feb1 	bl	8000a3c <__NVIC_DisableIRQ>
	SerialIn_init();
 8000cda:	f7ff fee3 	bl	8000aa4 <SerialIn_init>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <__NVIC_EnableIRQ>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_DisableIRQ>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db12      	blt.n	8000d58 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	490a      	ldr	r1, [pc, #40]	; (8000d64 <__NVIC_DisableIRQ+0x44>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	3320      	adds	r3, #32
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d4c:	f3bf 8f4f 	dsb	sy
}
 8000d50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d52:	f3bf 8f6f 	isb	sy
}
 8000d56:	bf00      	nop
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <TIM3_IRQHandler>:
extern uint8_t DeviceMode;
uint8_t TIM_indx;

// Main serial receive / transmit clock //
void TIM3_IRQHandler()
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	TIM3->SR &= ~0x1;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <TIM3_IRQHandler+0x40>)
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <TIM3_IRQHandler+0x40>)
 8000dc6:	f023 0301 	bic.w	r3, r3, #1
 8000dca:	6113      	str	r3, [r2, #16]
	// Bits transfer / reception //
	if (TIM_indx) // Every second interrupt
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <TIM3_IRQHandler+0x44>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <TIM3_IRQHandler+0x20>
	{
		SerialReceiveBitFlag = PENDING_BIT_RECEIVE;
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <TIM3_IRQHandler+0x48>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e002      	b.n	8000de2 <TIM3_IRQHandler+0x26>
	}
	else
	{
		SerialSetBitFlag = PENDING_BIT_SET; // Require bit set on serial data line
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <TIM3_IRQHandler+0x4c>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
	}
	TIM_indx ^= 0x1;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <TIM3_IRQHandler+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	f083 0301 	eor.w	r3, r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <TIM3_IRQHandler+0x44>)
 8000dee:	701a      	strb	r2, [r3, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40000400 	.word	0x40000400
 8000e00:	20000230 	.word	0x20000230
 8000e04:	2000022f 	.word	0x2000022f
 8000e08:	2000022d 	.word	0x2000022d

08000e0c <TIM6_DAC_IRQHandler>:

// Button contact bounce protection 100ms one-pulse mode timer //
void TIM6_DAC_IRQHandler()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	TIM6->SR &= ~0x1;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <TIM6_DAC_IRQHandler+0x24>)
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <TIM6_DAC_IRQHandler+0x24>)
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	6113      	str	r3, [r2, #16]
	if (GPIOA->IDR & 0x1)
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <TIM6_DAC_IRQHandler+0x28>)
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <TIM6_DAC_IRQHandler+0x20>
	{
		// Button press confirm //
		MasterMode_init();
 8000e28:	f7ff fcd0 	bl	80007cc <MasterMode_init>
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40001000 	.word	0x40001000
 8000e34:	40020000 	.word	0x40020000

08000e38 <TIM3_init>:

// Main serial clock initialization //
void TIM3_init()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <TIM3_init+0x4c>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <TIM3_init+0x4c>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 |= TIM_CR1_ARPE;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <TIM3_init+0x50>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <TIM3_init+0x50>)
 8000e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e52:	6013      	str	r3, [r2, #0]
	TIM3_FrequencySet(FREQ_20K);	// Default value to be changed
 8000e54:	2005      	movs	r0, #5
 8000e56:	f000 f849 	bl	8000eec <TIM3_FrequencySet>
	TIM3->DIER |= TIM_DIER_UIE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <TIM3_init+0x50>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <TIM3_init+0x50>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM3_IRQn, 7);
 8000e66:	2107      	movs	r1, #7
 8000e68:	201d      	movs	r0, #29
 8000e6a:	f7ff ff7d 	bl	8000d68 <__NVIC_SetPriority>
	NVIC_DisableIRQ(TIM3_IRQn);
 8000e6e:	201d      	movs	r0, #29
 8000e70:	f7ff ff56 	bl	8000d20 <__NVIC_DisableIRQ>

	START_TIMER(TIM3);
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <TIM3_init+0x50>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a03      	ldr	r2, [pc, #12]	; (8000e88 <TIM3_init+0x50>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40000400 	.word	0x40000400

08000e8c <TIM6_init>:

// Button contact bounce protection one pulse mode timer initialization //
void TIM6_init()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <TIM6_init+0x58>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <TIM6_init+0x58>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40
	TIM6->CR1 |= TIM_CR1_ARPE;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <TIM6_init+0x5c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <TIM6_init+0x5c>)
 8000ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea6:	6013      	str	r3, [r2, #0]
	TIM6->CR1 |= TIM_CR1_OPM;	// One pulse mode
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <TIM6_init+0x5c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <TIM6_init+0x5c>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6013      	str	r3, [r2, #0]

	TIM6->PSC = 1600-1;			// 100ms delay
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <TIM6_init+0x5c>)
 8000eb6:	f240 623f 	movw	r2, #1599	; 0x63f
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 1000-1;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <TIM6_init+0x5c>)
 8000ebe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM6->DIER |= TIM_DIER_UIE;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <TIM6_init+0x5c>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <TIM6_init+0x5c>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM6_DAC_IRQn, 7);
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	2036      	movs	r0, #54	; 0x36
 8000ed4:	f7ff ff48 	bl	8000d68 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ed8:	2036      	movs	r0, #54	; 0x36
 8000eda:	f7ff ff03 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40001000 	.word	0x40001000

08000eec <TIM3_FrequencySet>:

uint8_t TIM3_FrequencySet(uint8_t req_freq)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	// Frequency of transfer is defined in global.h settings file //
	switch (req_freq)
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d842      	bhi.n	8000f84 <TIM3_FrequencySet+0x98>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <TIM3_FrequencySet+0x18>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f21 	.word	0x08000f21
 8000f08:	08000f31 	.word	0x08000f31
 8000f0c:	08000f3f 	.word	0x08000f3f
 8000f10:	08000f4d 	.word	0x08000f4d
 8000f14:	08000f5b 	.word	0x08000f5b
 8000f18:	08000f69 	.word	0x08000f69
 8000f1c:	08000f77 	.word	0x08000f77
	{
		case FREQ_100:
			// Prescaler and auto-reload registers values corresponding to the chosen frequency //
			TIM3->ARR = 80-1;
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f22:	224f      	movs	r2, #79	; 0x4f
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC = 1000-1;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f2e:	e02e      	b.n	8000f8e <TIM3_FrequencySet+0xa2>
		case FREQ_500:
			TIM3->ARR = 80-1;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f32:	224f      	movs	r2, #79	; 0x4f
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC = 200-1;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f38:	22c7      	movs	r2, #199	; 0xc7
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f3c:	e027      	b.n	8000f8e <TIM3_FrequencySet+0xa2>
		case FREQ_1K:
			TIM3->ARR = 80-1;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f40:	224f      	movs	r2, #79	; 0x4f
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC = 100-1;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f46:	2263      	movs	r2, #99	; 0x63
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f4a:	e020      	b.n	8000f8e <TIM3_FrequencySet+0xa2>
		case FREQ_10K:
			TIM3->ARR = 80-1;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f4e:	224f      	movs	r2, #79	; 0x4f
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC = 10-1;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f54:	2209      	movs	r2, #9
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f58:	e019      	b.n	8000f8e <TIM3_FrequencySet+0xa2>
		case FREQ_20K:
			TIM3->ARR = 40-1;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f5c:	2227      	movs	r2, #39	; 0x27
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC = 10-1;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f62:	2209      	movs	r2, #9
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f66:	e012      	b.n	8000f8e <TIM3_FrequencySet+0xa2>
		case FREQ_50K:
			TIM3->ARR = 16-1;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC = 10-1;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f70:	2209      	movs	r2, #9
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f74:	e00b      	b.n	8000f8e <TIM3_FrequencySet+0xa2>
		case FREQ_100K:
			TIM3->ARR = 8-1;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC = 10-1;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <TIM3_FrequencySet+0xb0>)
 8000f7e:	2209      	movs	r2, #9
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f82:	e004      	b.n	8000f8e <TIM3_FrequencySet+0xa2>
		default:
			// In case of undefined frequency of serial transfer //
			GPIOE->BSRR = FREQ_0 << FREQ_POS; // Reset f0..f2 ports to 0
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <TIM3_FrequencySet+0xb4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
		return TIM_FERQ_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <TIM3_FrequencySet+0xa4>
	}
	return TIM_FERQ_SET;	// OK
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40000400 	.word	0x40000400
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fa8:	f7ff f91e 	bl	80001e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <LoopForever+0xe>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	; (8000ff0 <LoopForever+0x16>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fd2:	f000 f811 	bl	8000ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd6:	f7ff fc4f 	bl	8000878 <main>

08000fda <LoopForever>:

LoopForever:
    b LoopForever
 8000fda:	e7fe      	b.n	8000fda <LoopForever>
  ldr   r0, =_estack
 8000fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000fe8:	08001060 	.word	0x08001060
  ldr r2, =_sbss
 8000fec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000ff0:	20000234 	.word	0x20000234

08000ff4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <__libc_init_array>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	4d0d      	ldr	r5, [pc, #52]	; (8001030 <__libc_init_array+0x38>)
 8000ffc:	4c0d      	ldr	r4, [pc, #52]	; (8001034 <__libc_init_array+0x3c>)
 8000ffe:	1b64      	subs	r4, r4, r5
 8001000:	10a4      	asrs	r4, r4, #2
 8001002:	2600      	movs	r6, #0
 8001004:	42a6      	cmp	r6, r4
 8001006:	d109      	bne.n	800101c <__libc_init_array+0x24>
 8001008:	4d0b      	ldr	r5, [pc, #44]	; (8001038 <__libc_init_array+0x40>)
 800100a:	4c0c      	ldr	r4, [pc, #48]	; (800103c <__libc_init_array+0x44>)
 800100c:	f000 f818 	bl	8001040 <_init>
 8001010:	1b64      	subs	r4, r4, r5
 8001012:	10a4      	asrs	r4, r4, #2
 8001014:	2600      	movs	r6, #0
 8001016:	42a6      	cmp	r6, r4
 8001018:	d105      	bne.n	8001026 <__libc_init_array+0x2e>
 800101a:	bd70      	pop	{r4, r5, r6, pc}
 800101c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001020:	4798      	blx	r3
 8001022:	3601      	adds	r6, #1
 8001024:	e7ee      	b.n	8001004 <__libc_init_array+0xc>
 8001026:	f855 3b04 	ldr.w	r3, [r5], #4
 800102a:	4798      	blx	r3
 800102c:	3601      	adds	r6, #1
 800102e:	e7f2      	b.n	8001016 <__libc_init_array+0x1e>
 8001030:	08001058 	.word	0x08001058
 8001034:	08001058 	.word	0x08001058
 8001038:	08001058 	.word	0x08001058
 800103c:	0800105c 	.word	0x0800105c

08001040 <_init>:
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	bf00      	nop
 8001044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001046:	bc08      	pop	{r3}
 8001048:	469e      	mov	lr, r3
 800104a:	4770      	bx	lr

0800104c <_fini>:
 800104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104e:	bf00      	nop
 8001050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001052:	bc08      	pop	{r3}
 8001054:	469e      	mov	lr, r3
 8001056:	4770      	bx	lr
